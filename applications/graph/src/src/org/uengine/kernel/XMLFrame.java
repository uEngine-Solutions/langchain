package org.uengine.kernel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import groovy.xml.MarkupBuilder;

import java.awt.event.ActionEvent;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import org.apache.xerces.parsers.SAXParser;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.jdom.xpath.XPath;
import org.metaworks.FieldDescriptor;
import org.metaworks.inputter.TextAreaInput;
import org.xml.sax.InputSource;

import com.predic8.wsdl.Definitions;
import com.predic8.wsdl.Message;
import com.predic8.wsdl.Operation;
import com.predic8.wsdl.PortType;
import com.predic8.wsdl.WSDLParser;
import com.predic8.wstool.creator.RequestTemplateCreator;
import com.predic8.wstool.creator.SOARequestCreator;

public class XMLFrame extends javax.swing.JFrame {

	private static final long serialVersionUID = GlobalContext.SERIALIZATION_UID;
	
	private boolean isEdited = false;
	private XMLTreeNode selectedXMLTreeNode = null;
	private FieldDescriptor requestXMLFD = null;
	
	/**
     * Creates new form NewJFrame
	 * @param requestXMLFD 
     */
	public XMLFrame(FieldDescriptor requestXMLFD, String xml) {
		this.requestXMLFD = requestXMLFD;
		
		this.xmlTree = createJTreeByXML(xml);
		this.xmlTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		expandAllNode(this.xmlTree, new TreePath(this.xmlTree.getModel().getRoot()));

		DefaultMutableTreeNode firstLeaf = (DefaultMutableTreeNode) this.xmlTree.getModel().getRoot();
		this.xmlTree.setSelectionPath(new TreePath(firstLeaf.getPath()));

		initComponents();
		
		this.jTabbedPane1.addChangeListener(new ChangeListener() {
			
			@Override
			public void stateChanged(ChangeEvent e) {
				JTabbedPane sourceTabbedPane = (JTabbedPane) e.getSource();
		        int index = sourceTabbedPane.getSelectedIndex();
		        String title = sourceTabbedPane.getTitleAt(index);
		        if (title.equals("Tree")) {
		        	String xml = xmlTxtArea.getText();
		    		xmlTree.setModel(createJTreeByXML(xml).getModel());
		    		xmlTree.updateUI();
		    		expandAllNode(xmlTree, new TreePath(xmlTree.getModel().getRoot()));
		        } else if (title.equals("XML")) {
		        }
			}
		});

		this.xmlTxtArea.setText(xml);

		this.attributeTable.setEnabled(false);
		this.qNameTxtField.setEnabled(false);
		this.lNameTxtField.setEnabled(false);
		this.namespaceTxtField.setEnabled(false);
		this.addAttributeBtn.setEnabled(false);
		this.removeAttributeBtn.setEnabled(false);
		this.valueTxtArea.setEnabled(false);
		this.saveBtn.setEnabled(false);
	}
	
	private JTree createJTreeByXML(String xml) {
		XMLTreeNode top = new XMLTreeNode("XML Document");
		SAXTreeBuilder saxTree = new SAXTreeBuilder(top);
		try {
			SAXParser saxParser = new SAXParser();
			saxParser.setContentHandler(saxTree);
			saxParser.parse(new InputSource(new ByteArrayInputStream(xml.getBytes())));
		} catch (Exception ex) {
			ex.printStackTrace();
			top.add(new DefaultMutableTreeNode(ex.getMessage()));
		}
		return new JTree(saxTree.getTree());
	}

	private void expandAllNode(JTree tree, TreePath parent) {
		XMLTreeNode node = (XMLTreeNode) parent.getLastPathComponent();
		if (node.getChildCount() >= 0) {
			for (Enumeration e = node.children(); e.hasMoreElements();) {
				XMLTreeNode n = (XMLTreeNode) e.nextElement();
				TreePath path = parent.pathByAddingChild(n);
				expandAllNode(tree, path);
			}
		}
		tree.expandPath(parent);
	}

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
//        xmlTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        qNameLabel = new javax.swing.JLabel();
        qNameTxtField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        attributeTable = new javax.swing.JTable();
        attributeLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        valueTxtArea = new javax.swing.JTextArea();
        valueLabel = new javax.swing.JLabel();
        addAttributeBtn = new javax.swing.JButton();
        removeAttributeBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        namespaceLabel = new javax.swing.JLabel();
        namespaceTxtField = new javax.swing.JTextField();
        lNameLabel = new javax.swing.JLabel();
        lNameTxtField = new javax.swing.JTextField();
        confirmBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        xmlTxtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        xmlTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                xmlTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(xmlTree);

        qNameLabel.setText("QName");

        qNameTxtField.setEditable(false);

        attributeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "name", "value"
            }
        ));
        jScrollPane2.setViewportView(attributeTable);

        attributeLabel.setText("Attribute");

        valueTxtArea.setColumns(20);
        valueTxtArea.setRows(1);
        jScrollPane3.setViewportView(valueTxtArea);

        valueLabel.setText("Value");

        addAttributeBtn.setText("Add");
        addAttributeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttributeAddActionPerformed(evt);
            }
        });

        removeAttributeBtn.setText("Remove");
        removeAttributeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttributeRemoveActionPerformed(evt);
            }
        });

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
				confirmBtnActionPerformed(evt);
            }
        });
        
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	closeBtnActionPerformed(evt);
            }
        });
        
        attributeTable.getModel().addTableModelListener(new TableModelListener() {
			@Override
			public void tableChanged(TableModelEvent e) {
				isEdited = true;
			}
		});
        
        valueTxtArea.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void removeUpdate(DocumentEvent e) {
				System.out.println("value text area remove update");
				isEdited = true;
			}
			@Override
			public void insertUpdate(DocumentEvent e) {
				System.out.println("value text area insert update");
				isEdited = true;
			}
			@Override
			public void changedUpdate(DocumentEvent e) {
				System.out.println("value text area changed update");
				isEdited = true;				
			}
		});

        namespaceLabel.setText("Namespace");

        namespaceTxtField.setEditable(false);

        lNameLabel.setText("LName");

        lNameTxtField.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(qNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(valueLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(attributeLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addAttributeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAttributeBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(qNameTxtField))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(373, Short.MAX_VALUE)
                        .addComponent(saveBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lNameLabel)
                            .addComponent(namespaceLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(namespaceTxtField)
                            .addComponent(lNameTxtField))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qNameLabel)
                    .addComponent(qNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lNameLabel)
                    .addComponent(lNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namespaceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(namespaceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAttributeBtn)
                    .addComponent(removeAttributeBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valueLabel)))
                    .addComponent(attributeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        confirmBtn.setText("Confirm");

        closeBtn.setText("Close");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(confirmBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeBtn)
                .addGap(248, 248, 248))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBtn)
                    .addComponent(closeBtn))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tree", jPanel3);

        xmlTxtArea.setColumns(20);
        xmlTxtArea.setRows(5);
        jScrollPane4.setViewportView(xmlTxtArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("XML", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>

	protected void closeBtnActionPerformed(ActionEvent evt) {
		this.dispose();
	}

	protected void confirmBtnActionPerformed(ActionEvent evt) {
		TextAreaInput textAreaInput = (TextAreaInput) this.requestXMLFD.getInputter();
		textAreaInput.setValue(this.xmlTxtArea.getText());
		this.dispose();
	}

	private void AttributeAddActionPerformed(java.awt.event.ActionEvent evt) {                                             
        ((DefaultTableModel) this.attributeTable.getModel()).addRow(new Object[]{});
    }                                            

	private void xmlTreeMouseClicked(java.awt.event.MouseEvent evt) {
		
		if (isEdited) {
			int result = JOptionPane.showConfirmDialog(null, "\"" + this.selectedXMLTreeNode.getNodeData().getQName() + "\" has been modified. Save changes?", "Save Resource", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
			if (result == 0) {
				saveBtnActionPerformed(null);
			}
		}
		
		this.attributeTable.setEnabled(true);
		
		XMLTreeNode node = (XMLTreeNode) this.xmlTree.getLastSelectedPathComponent();
		this.selectedXMLTreeNode = node;
		
		this.qNameTxtField.setText(null);
		this.lNameTxtField.setText(null);
		this.namespaceTxtField.setText(null);
		this.valueTxtArea.setText(null);
		
		DefaultTableModel dm = (DefaultTableModel) this.attributeTable.getModel();
		dm.getDataVector().removeAllElements();
		dm.fireTableDataChanged();
		if (node != null) {
			Object userObject = node.getUserObject();
			NodeData nodeData = node.getNodeData();

			if (nodeData != null) {
				this.qNameTxtField.setText(nodeData.getQName());
				this.lNameTxtField.setText(nodeData.getLName());
				this.namespaceTxtField.setText(nodeData.getNamespaceURI());
				this.valueTxtArea.setText(nodeData.getValue());

				Map<String, String> attributes = nodeData.getAttributes();
				for (Entry<String, String> entry : attributes.entrySet()) {
					dm.addRow(new Object[] { entry.getKey(), entry.getValue() });
				}

				this.qNameTxtField.setEnabled(true);
				this.lNameTxtField.setEnabled(true);
				this.namespaceTxtField.setEnabled(true);
				this.addAttributeBtn.setEnabled(true);
				this.removeAttributeBtn.setEnabled(true);
				if (node.isLeaf()) {
					this.valueTxtArea.setEnabled(true);
				} else {
					this.valueTxtArea.setEnabled(false);
				}
				this.saveBtn.setEnabled(true);
			} else {
				this.qNameTxtField.setEnabled(false);
				this.lNameTxtField.setEnabled(false);
				this.namespaceTxtField.setEnabled(false);
				this.addAttributeBtn.setEnabled(false);
				this.removeAttributeBtn.setEnabled(false);
				this.valueTxtArea.setEnabled(false);
				this.saveBtn.setEnabled(false);
			}

		}
		
		isEdited = false;
	}                              

    private void AttributeRemoveActionPerformed(java.awt.event.ActionEvent evt) {                                                
        int selectedRow = this.attributeTable.getSelectedRow();
        if (selectedRow != -1) {
            ((DefaultTableModel) this.attributeTable.getModel()).removeRow(selectedRow);
        }
    }                                               

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {
        String name = this.qNameTxtField.getText();
        
        TableCellEditor cellEditor = this.attributeTable.getCellEditor();
        if (cellEditor != null) {
            cellEditor.stopCellEditing();
        }

        TableModel model = this.attributeTable.getModel();
        Map<String, String> attrs = new LinkedHashMap<String, String>();
        for (int rowIndex = 0; rowIndex < model.getRowCount(); rowIndex++) {
            String attributeName = (String) model.getValueAt(rowIndex, 0);
            String attributeValue = (String) model.getValueAt(rowIndex, 1);
            attrs.put(attributeName, attributeValue);
        }
        String value = this.valueTxtArea.getText();
        
        
        NodeData nodeData = this.selectedXMLTreeNode.getNodeData();
        nodeData.setAttributes(attrs);
        if (this.selectedXMLTreeNode.isLeaf()) {
        	nodeData.setValue(value);
        }
        
        // 트리 노드 갱신
		((DefaultTreeModel) this.xmlTree.getModel()).nodeChanged(this.selectedXMLTreeNode);
		
		StringBuffer xpression = new StringBuffer();
		XMLTreeNode treeNode = this.selectedXMLTreeNode;
		while (treeNode != null) {
			if (treeNode.getNodeData() != null) {
				if (xpression.length() > 0) xpression.insert(0, "/");
				xpression.insert(0, treeNode.getNodeData().getLName());
			}
			treeNode = (XMLTreeNode) treeNode.getParent();
		}
		
		try {
			String xml = this.xmlTxtArea.getText();
			Document doc = new SAXBuilder().build(new StringReader(xml));
//			XPath xpression = XPath.newInstance("//" + nodeData.getLName());
			XPath xpressionXPath = XPath.newInstance("//" + xpression.toString());
			xpressionXPath.addNamespace(nodeData.getLName().split(":")[0], nodeData.getNamespaceURI());
			
			Element obj = (Element) xpressionXPath.selectSingleNode(doc);
			
			List<String> removedAttrs = new ArrayList<String>();
			List<Attribute> attributes = obj.getAttributes();
			for (Attribute attr : attributes) {
				removedAttrs.add(attr.getName());
			}
			for (String attrName : removedAttrs) {
				obj.removeAttribute(attrName);
			}
			
			for (Entry<String, String> entry : attrs.entrySet()) {
				obj.setAttribute(entry.getKey(), entry.getValue());
			}
			if (this.selectedXMLTreeNode.isLeaf()) {
				obj.setText(value);
			}

			XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());
			String xmlString = outputter.outputString(doc);
			this.xmlTxtArea.setText(xmlString);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		isEdited = false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(XMLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(XMLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(XMLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(XMLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
    	
		WSDLParser parser = new WSDLParser();
		Definitions defs = parser.parse("http://localhost:8080/uengine-web/services/workflow.wsdl");

		final StringWriter writer = new StringWriter();

		List<PortType> pts = defs.getPortTypes();
		for (PortType pt : pts) {
			System.out.println(pt.getName());

			List<Operation> ops = pt.getOperations();
			for (Operation op : ops) {
				System.out.println("\t" + op.getName());
				Message inputMsg = op.getInput().getMessage();
				Message outputMsg = op.getOutput().getMessage();

				System.out.println("\t\t" + inputMsg.getName());

				SOARequestCreator creator = new SOARequestCreator(defs, new RequestTemplateCreator(), new MarkupBuilder(writer));
				creator.createRequest(pt.getName(), op.getName(), defs.getBindings().get(0).getName());
				System.out.println(writer);

				System.out.println("\t\t" + outputMsg.getName());

				System.out.println("\n\n\n\n");
				break;
			}
			break;
		}

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XMLFrame(null, writer.toString()).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify
    private javax.swing.JButton addAttributeBtn;
    private javax.swing.JLabel attributeLabel;
    private javax.swing.JTable attributeTable;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lNameLabel;
    private javax.swing.JTextField lNameTxtField;
    private javax.swing.JTextField qNameTxtField;
    private javax.swing.JLabel namespaceLabel;
    private javax.swing.JTextField namespaceTxtField;
    private javax.swing.JLabel qNameLabel;
    private javax.swing.JButton removeAttributeBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextArea xmlTxtArea;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextArea valueTxtArea;
    private javax.swing.JTree xmlTree;
    // End of variables declaration
}
